# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python38-181-RT180-xgb11:
        python.version: '3.7'
        ONNX_PATH: onnx==1.8.1
        ONNXRT_PATH: '-i https://test.pypi.org/simple/ ort-nightly==1.8.0.dev202105266'
        COREML_PATH: git+https://github.com/apple/coremltools@3.1
        xgboost.version: '>=1.2'
    maxParallel: 3

  steps:
  - script: sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      python -m pip install --upgrade pip
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge protobuf
      conda install -c conda-forge numpy
      conda install -c conda-forge cmake
      pip install $(COREML_PATH)
      pip install $(ONNX_PATH)
      python -m pip install tensorflow-cpu==1.15.0
      python -m pip install tf2onnx==1.5.6
      python -m pip install git+https://github.com/microsoft/onnxconverter-common
      python -m pip install git+https://github.com/onnx/keras-onnx
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
      pip install xgboost$(xgboost.version)
      pip install $(ONNXRT_PATH)
      pip install pytest
    displayName: 'Install dependencies'

  - script: |
      python -m flake8 ./onnxmltools
    displayName: 'run flake8 check'

  - script: |
      pip install -e .
    displayName: 'local installation'

  - script: |
      python -c "import onnxconverter_common"
      python -c "import onnxruntime"
      pytest tests --ignore=tests/sparkml --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest - onnxmltools'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

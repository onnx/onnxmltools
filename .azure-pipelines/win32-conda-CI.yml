# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  timeoutInMinutes: 30
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:

      Python311-1150-RT1162:
        python.version: '3.11'
        ONNX_PATH: 'onnx==1.15.0'
        ONNXRT_PATH: 'onnxruntime==1.16.2'
        COREML_PATH: NONE
        numpy.version: ''
        xgboost.version: '2.0.2'

      Python311-1141-RT1162:
        python.version: '3.11'
        ONNX_PATH: 'onnx==1.14.1'
        ONNXRT_PATH: 'onnxruntime==1.16.2'
        COREML_PATH: NONE
        numpy.version: ''
        xgboost.version: '1.7.5'

      Python310-1141-RT1151:
        python.version: '3.10'
        ONNX_PATH: 'onnx==1.14.1'
        ONNXRT_PATH: 'onnxruntime==1.15.1'
        COREML_PATH: NONE
        numpy.version: ''
        xgboost.version: '1.7.5'

      Python310-1141-RT1140:
        python.version: '3.10'
        ONNX_PATH: 'onnx==1.14.1'
        ONNXRT_PATH: onnxruntime==1.14.0
        COREML_PATH: NONE
        numpy.version: ''
        xgboost.version: '1.7.5'

      Python39-1141-RT1140:
        python.version: '3.9'
        ONNX_PATH: 'onnx==1.14.1'
        ONNXRT_PATH: onnxruntime==1.14.0
        COREML_PATH: NONE
        numpy.version: ''
        xgboost.version: '1.7.5'

    maxParallel: 3

  steps:
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name py$(python.version) -c conda-forge python=$(python.version) numpy protobuf scikit-learn scipy cython
    displayName: Create Anaconda environment

  - script: |
      call activate py$(python.version)
      python -m pip install --upgrade pip numpy
      echo Test numpy installation... && python -c "import numpy"
      python -m pip install -r requirements.txt
    displayName: 'Install dependencies (1)'

  - script: |
      call activate py$(python.version)
      python -m pip install -r requirements-dev.txt
    displayName: 'Install dependencies-dev'

  - script: |
      call activate py$(python.version)
      python -m pip install --upgrade scikit-learn
      python -m pip install --upgrade lightgbm
      python -m pip install "xgboost==$(xgboost.version)"
    displayName: 'Install scikit-learn'

  - script: |
      call activate py$(python.version)
      python -m pip install %ONNX_PATH%
      python -m pip install %ONNXRT_PATH%
      python -m pip install "numpy$(numpy.version)"
    displayName: 'Install onnxruntime'

  - script: |
      call activate py$(python.version)
      python -m pip install coloredlogs flatbuffers packaging sympy numpy protobuf
      python -m pip install $(ONNXRT_PATH)
    displayName: 'Install ort-nightly'

  - script: |
      call activate py$(python.version)
      python -m pip install -e .
      export PYTHONPATH=.
      python -c "import onnxconverter_common;print(onnxconverter_common.__version__)"
      python -c "import onnx;print(onnx.__version__)"
      python -c "import onnxruntime;print(onnxruntime.__version__)"
      python -c "import xgboost;print(xgboost.__version__)"
      python -c "import lightgbm;print(lightgbm.__version__)"
    displayName: 'version'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/baseline --durations=0
    displayName: 'pytest baseline'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/catboost --durations=0
    displayName: 'pytest catboost'

  - script: |
      call activate py$(python.version)
      set PYTHONPATH=.
      if "$(COREML_PATH)" neq "NONE" python -m pip install %COREML_PATH%
      if "$(COREML_PATH)" neq "NONE" python -m pytest tests/coreml --durations=0
    displayName: 'pytest coreml - [$(COREML_PATH)]'
    #condition: ne('$(COREML_PATH)', 'NONE')

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/lightgbm --durations=0
    displayName: 'pytest lightgbm'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/sparkml --durations=0
    displayName: 'pytest sparkml'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/svmlib --durations=0
    displayName: 'pytest svmlib'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/utils --durations=0
    displayName: 'pytest utils'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/xgboost --durations=0
    displayName: 'pytest xgboost'

  - script: |
      call activate py$(python.version)
      python -m pip install torch
      python -m pip install hummingbird-ml --no-deps
    displayName: 'Install hummingbird-ml'

  - script: |
      call activate py$(python.version)
      export PYTHONPATH=.
      python -m pytest tests/hummingbirdml --durations=0
    displayName: 'pytest hummingbirdml'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

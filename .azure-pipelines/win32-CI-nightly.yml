# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python39-nightly:
        python.version: '3.9'
        ONNXRT_PATH: -i https://test.pypi.org/simple/ ort-nightly
        COREML_PATH: git+https://github.com/apple/coremltools@3.1
      Python38-nightly:
        python.version: '3.8'
        ONNXRT_PATH: -i https://test.pypi.org/simple/ ort-nightly
        COREML_PATH: git+https://github.com/apple/coremltools@3.1
      Python37-nightly:
        python.version: '3.7'
        ONNXRT_PATH: -i https://test.pypi.org/simple/ ort-nightly
        COREML_PATH: git+https://github.com/apple/coremltools@3.1
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name py$(python.version) -c conda-forge python=$(python.version) numpy protobuf
    displayName: Create Anaconda environment

  - script: |
      call activate py$(python.version)
      python -m pip install --upgrade pip numpy
      pip install %COREML_PATH% %ONNX_PATH%
      pip install humming-bird-ml --no-deps
      pip install -r requirements.txt
      python -m pip install torch==1.8.1+cpu torchvision==0.9.1+cpu torchaudio===0.8.1 -f https://download.pytorch.org/whl/torch_stable.html
      pip install -r requirements-dev.txt
      pip install %ONNXRT_PATH%
    displayName: 'Install dependencies'

  - script: |
      call activate py$(python.version)
      pip install -e .
      python -c "import onnxconverter_common;print(onnxconverter_common.__version__)"
      python -c "import onnxruntime;print(onnxruntime.__version__)"
      python -m pytest tests  --ignore=tests/sparkml --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest - onnxmltools'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
